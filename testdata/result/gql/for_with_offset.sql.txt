--- for_with_offset.sql
GRAPH FinGraph
MATCH (p:Person)-[o:Owns]->(a:Account)
FOR element in ["all","some"] WITH OFFSET
RETURN p.name, element as alert_type, offset
ORDER BY p.name, element, offset

--- AST
&ast.GqlGraphQuery{
  GraphClause: &ast.GqlGraphClause{
    GqlGraph:             0,
    GqlPropertyGraphName: &ast.Ident{
      NamePos: 6,
      NameEnd: 14,
      Name:    "FinGraph",
    },
  },
  GqlMultiLinearQueryStatement: &ast.GqlMultiLinearQueryStatement{
    GqlLinearQueryStatements: []ast.GqlLinearQueryStatement{
      &ast.GqlSimpleLinearQueryStatement{
        PrimitiveQueryStatementList: []ast.GqlPrimitiveQueryStatement{
          &ast.GqlMatchStatement{
            Optional:     -1,
            Match:        15,
            MatchHint:    (*ast.Hint)(nil),
            PrefixOrMode: nil,
            GraphPattern: &ast.GqlGraphPattern{
              PathPatternList: []*ast.GqlTopLevelPathPattern{
                &ast.GqlTopLevelPathPattern{
                  PathSearchPrefixOrPathMode: nil,
                  PathPattern:                &ast.GqlPathPattern{
                    PathTermList: []*ast.GqlQuantifiablePathTerm{
                      &ast.GqlQuantifiablePathTerm{
                        Hint:     (*ast.Hint)(nil),
                        PathTerm: &ast.GqlNodePattern{
                          LParen:        21,
                          RParen:        30,
                          PatternFiller: &ast.GqlPatternFiller{
                            Hint:                 (*ast.Hint)(nil),
                            GraphPatternVariable: &ast.Ident{
                              NamePos: 22,
                              NameEnd: 23,
                              Name:    "p",
                            },
                            IsLabelCondition: &ast.GqlIsLabelCondition{
                              IsOrColon:       23,
                              LabelExpression: &ast.GqlLabelName{
                                IsPercent: false,
                                LabelName: &ast.Ident{
                                  NamePos: 24,
                                  NameEnd: 30,
                                  Name:    "Person",
                                },
                              },
                            },
                            Filter: nil,
                          },
                        },
                        Quantifier: nil,
                      },
                      &ast.GqlQuantifiablePathTerm{
                        Hint:     (*ast.Hint)(nil),
                        PathTerm: &ast.GqlFullEdgeRight{
                          First:         31,
                          Last:          41,
                          PatternFiller: &ast.GqlPatternFiller{
                            Hint:                 (*ast.Hint)(nil),
                            GraphPatternVariable: &ast.Ident{
                              NamePos: 33,
                              NameEnd: 34,
                              Name:    "o",
                            },
                            IsLabelCondition: &ast.GqlIsLabelCondition{
                              IsOrColon:       34,
                              LabelExpression: &ast.GqlLabelName{
                                IsPercent: false,
                                LabelName: &ast.Ident{
                                  NamePos: 35,
                                  NameEnd: 39,
                                  Name:    "Owns",
                                },
                              },
                            },
                            Filter: nil,
                          },
                        },
                        Quantifier: nil,
                      },
                      &ast.GqlQuantifiablePathTerm{
                        Hint:     (*ast.Hint)(nil),
                        PathTerm: &ast.GqlNodePattern{
                          LParen:        42,
                          RParen:        52,
                          PatternFiller: &ast.GqlPatternFiller{
                            Hint:                 (*ast.Hint)(nil),
                            GraphPatternVariable: &ast.Ident{
                              NamePos: 43,
                              NameEnd: 44,
                              Name:    "a",
                            },
                            IsLabelCondition: &ast.GqlIsLabelCondition{
                              IsOrColon:       44,
                              LabelExpression: &ast.GqlLabelName{
                                IsPercent: false,
                                LabelName: &ast.Ident{
                                  NamePos: 45,
                                  NameEnd: 52,
                                  Name:    "Account",
                                },
                              },
                            },
                            Filter: nil,
                          },
                        },
                        Quantifier: nil,
                      },
                    },
                  },
                },
              },
              WhereClause: (*ast.Where)(nil),
            },
          },
          &ast.GqlForStatement{
            For:         54,
            ElementName: &ast.Ident{
              NamePos: 58,
              NameEnd: 65,
              Name:    "element",
            },
            ArrayExpression: &ast.ArrayLiteral{
              Array:  0,
              Lbrack: 69,
              Rbrack: 82,
              Type:   nil,
              Values: []ast.Expr{
                &ast.StringLiteral{
                  ValuePos: 70,
                  ValueEnd: 75,
                  Value:    "all",
                },
                &ast.StringLiteral{
                  ValuePos: 76,
                  ValueEnd: 82,
                  Value:    "some",
                },
              },
            },
            WithOffsetClause: &ast.GqlWithOffsetClause{
              With:       84,
              Offset:     89,
              OffsetName: (*ast.Ident)(nil),
            },
          },
          &ast.GqlReturnStatement{
            AllOrDistinct:  0,
            Return:         96,
            ReturnItemList: []ast.GqlReturnItem{
              &ast.ExprSelectItem{
                Expr: &ast.Path{
                  Idents: []*ast.Ident{
                    &ast.Ident{
                      NamePos: 103,
                      NameEnd: 104,
                      Name:    "p",
                    },
                    &ast.Ident{
                      NamePos: 105,
                      NameEnd: 109,
                      Name:    "name",
                    },
                  },
                },
              },
              &ast.Alias{
                Expr: &ast.Ident{
                  NamePos: 111,
                  NameEnd: 118,
                  Name:    "element",
                },
                As: &ast.AsAlias{
                  As:    -1,
                  Alias: &ast.Ident{
                    NamePos: 122,
                    NameEnd: 132,
                    Name:    "alert_type",
                  },
                },
              },
              &ast.ExprSelectItem{
                Expr: &ast.Ident{
                  NamePos: 134,
                  NameEnd: 140,
                  Name:    "offset",
                },
              },
            },
            GroupByClause: (*ast.GroupBy)(nil),
            OrderByClause: &ast.OrderBy{
              Order: 141,
              Items: []*ast.OrderByItem{
                &ast.OrderByItem{
                  DirPos: -1,
                  Expr:   &ast.Path{
                    Idents: []*ast.Ident{
                      &ast.Ident{
                        NamePos: 150,
                        NameEnd: 151,
                        Name:    "p",
                      },
                      &ast.Ident{
                        NamePos: 152,
                        NameEnd: 156,
                        Name:    "name",
                      },
                    },
                  },
                  Collate: (*ast.Collate)(nil),
                  Dir:     "",
                },
                &ast.OrderByItem{
                  DirPos: -1,
                  Expr:   &ast.Ident{
                    NamePos: 158,
                    NameEnd: 165,
                    Name:    "element",
                  },
                  Collate: (*ast.Collate)(nil),
                  Dir:     "",
                },
                &ast.OrderByItem{
                  DirPos: -1,
                  Expr:   &ast.Ident{
                    NamePos: 167,
                    NameEnd: 173,
                    Name:    "offset",
                  },
                  Collate: (*ast.Collate)(nil),
                  Dir:     "",
                },
              },
            },
            LimitAndOffsetClause: nil,
          },
        },
      },
    },
  },
}

--- SQL
GRAPH FinGraph
MATCH (p:Person)-[o:Owns]->(a:Account)
FOR element IN ARRAY["all", "some"] WITH OFFSET
RETURN p.name, element AS alert_type, offset ORDER BY p.name, element, offset
